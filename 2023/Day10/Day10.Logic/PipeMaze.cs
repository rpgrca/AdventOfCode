


namespace Day10.Logic;
public class PipeMaze
{
    private readonly string _input;
    private readonly string[] _lines;

    public PipeMaze(string input)
    {
        _input = input;
        _lines = _input.Split("\n");

        for (var y = 0; y < H; y++)
        {

            for (var x = 0; x < W; x++)
            {
                if (_lines[y][x] == 'S')
                {
                    X = x;
                    Y = y;
                    goto Found;
                }
            }
        }

        Found:;
        var p = new List<char>();

        if (X - 1 >= 0)
        {
            if (X + 1 < W)  // w & e
            {
                var d = new Dictionary<(char, char), char>
                {
                    { ('F', 'F'), 'x' },
                    { ('F', 'J'), '-' },
                    { ('F', 'L'), 'x' },
                    { ('F', '7'), '-' },
                    { ('F', '-'), '-' },
                    { ('F', '|'), 'x' },
                    { ('F', '.'), 'x' },
                    { ('J', 'F'), 'x' },
                    { ('J', 'J'), 'x' },
                    { ('J', 'L'), 'x' },
                    { ('J', '7'), 'x' },
                    { ('J', '-'), 'x' },
                    { ('J', '|'), 'x' },
                    { ('J', '.'), 'x' },
                    { ('L', 'F'), 'x' },
                    { ('L', 'J'), '-' },
                    { ('L', 'L'), 'x' },
                    { ('L', '7'), '-' },
                    { ('L', '-'), '-' },
                    { ('L', '|'), 'x' },
                    { ('L', '.'), 'x' },
                    { ('7', 'F'), 'x' },
                    { ('7', 'J'), 'x' },
                    { ('7', 'L'), 'x' },
                    { ('7', '7'), 'x' },
                    { ('7', '-'), 'x' },
                    { ('7', '|'), 'x' },
                    { ('7', '.'), 'x' },
                    { ('-', 'F'), 'x' },
                    { ('-', 'J'), '-' },
                    { ('-', 'L'), 'x' },
                    { ('-', '7'), '-' },
                    { ('-', '-'), '-' },
                    { ('-', '|'), 'x' },
                    { ('-', '.'), 'x' },
                    { ('|', 'F'), 'x' },
                    { ('|', 'J'), 'x' },
                    { ('|', 'L'), 'x' },
                    { ('|', '7'), 'x' },
                    { ('|', '-'), 'x' },
                    { ('|', '|'), 'x' },
                    { ('|', '.'), 'x' },
                    { ('.', 'F'), 'x' },
                    { ('.', 'J'), 'x' },
                    { ('.', 'L'), 'x' },
                    { ('.', '7'), 'x' },
                    { ('.', '-'), 'x' },
                    { ('.', '|'), 'x' },
                    { ('.', '.'), 'x' }
                };

                if (d.ContainsKey((_lines[Y][X-1], _lines[Y][X+1])))
                {
                    var x = d[(_lines[Y][X-1], _lines[Y][X+1])];
                    if (x != 'x')
                    {
                        p.Add(x);
                    }
                }
            }

            if (Y - 1 >= 0) // w & n
            {
                var d = new Dictionary<(char, char), char>
                {
                    { ('F', 'F'), 'J' },
                    { ('F', 'J'), 'x' },
                    { ('F', 'L'), 'x' },
                    { ('F', '7'), 'J' },
                    { ('F', '-'), 'x' },
                    { ('F', '|'), 'J' },
                    { ('F', '.'), 'x' },
                    { ('J', 'F'), 'x' },
                    { ('J', 'J'), 'x' },
                    { ('J', 'L'), 'x' },
                    { ('J', '7'), 'x' },
                    { ('J', '-'), 'x' },
                    { ('J', '|'), 'x' },
                    { ('J', '.'), 'x' },
                    { ('L', 'F'), 'J' },
                    { ('L', 'J'), 'x' },
                    { ('L', 'L'), 'x' },
                    { ('L', '7'), 'J' },
                    { ('L', '-'), 'x' },
                    { ('L', '|'), 'J' },
                    { ('L', '.'), 'x' },
                    { ('7', 'F'), 'x' },
                    { ('7', 'J'), 'x' },
                    { ('7', 'L'), 'x' },
                    { ('7', '7'), 'x' },
                    { ('7', '-'), 'x' },
                    { ('7', '|'), 'x' },
                    { ('7', '.'), 'x' },
                    { ('-', 'F'), 'J' },
                    { ('-', 'J'), 'x' },
                    { ('-', 'L'), 'x' },
                    { ('-', '7'), 'J' },
                    { ('-', '-'), 'x' },
                    { ('-', '|'), 'J' },
                    { ('-', '.'), 'x' },
                    { ('|', 'F'), 'x' },
                    { ('|', 'J'), 'x' },
                    { ('|', 'L'), 'x' },
                    { ('|', '7'), 'x' },
                    { ('|', '-'), 'x' },
                    { ('|', '|'), 'x' },
                    { ('|', '.'), 'x' },
                    { ('.', 'F'), 'x' },
                    { ('.', 'J'), 'x' },
                    { ('.', 'L'), 'x' },
                    { ('.', '7'), 'x' },
                    { ('.', '-'), 'x' },
                    { ('.', '|'), 'x' },
                    { ('.', '.'), 'x' }
                };

                if (d.ContainsKey((_lines[Y][X-1], _lines[Y-1][X])))
                {
                    char item = d[(_lines[Y][X - 1], _lines[Y - 1][X])];
                    if (item != 'x')
                    {
                        p.Add(item);
                    }
                }
            }

            if (Y + 1 < H)  // w & s
            {
                var d = new Dictionary<(char, char), char>
                {
                    { ('F', 'F'), 'x' },
                    { ('F', 'J'), '7' },
                    { ('F', 'L'), '7' },
                    { ('F', '7'), 'x' },
                    { ('F', '-'), 'x' },
                    { ('F', '|'), '7' },
                    { ('F', '.'), 'x' },
                    { ('J', 'F'), 'x' },
                    { ('J', 'J'), 'x' },
                    { ('J', 'L'), 'x' },
                    { ('J', '7'), 'x' },
                    { ('J', '-'), 'x' },
                    { ('J', '|'), 'x' },
                    { ('J', '.'), 'x' },
                    { ('L', 'F'), 'x' },
                    { ('L', 'J'), '7' },
                    { ('L', 'L'), '7' },
                    { ('L', '7'), 'x' },
                    { ('L', '-'), 'x' },
                    { ('L', '|'), '7' },
                    { ('L', '.'), 'x' },
                    { ('7', 'F'), 'x' },
                    { ('7', 'J'), 'x' },
                    { ('7', 'L'), 'x' },
                    { ('7', '7'), 'x' },
                    { ('7', '-'), 'x' },
                    { ('7', '|'), 'x' },
                    { ('7', '.'), 'x' },
                    { ('-', 'F'), 'x' },
                    { ('-', 'J'), '7' },
                    { ('-', 'L'), '7' },
                    { ('-', '7'), 'x' },
                    { ('-', '-'), 'x' },
                    { ('-', '|'), '7' },
                    { ('-', '.'), 'x' },
                    { ('|', 'F'), 'x' },
                    { ('|', 'J'), 'x' },
                    { ('|', 'L'), 'x' },
                    { ('|', '7'), 'x' },
                    { ('|', '-'), 'x' },
                    { ('|', '|'), 'x' },
                    { ('|', '.'), 'x' },
                    { ('.', 'F'), 'x' },
                    { ('.', 'J'), 'x' },
                    { ('.', 'L'), 'x' },
                    { ('.', '7'), 'x' },
                    { ('.', '-'), 'x' },
                    { ('.', '|'), 'x' },
                    { ('.', '.'), 'x' }
                };

                if (d.ContainsKey((_lines[Y][X-1], _lines[Y+1][X])))
                {
                    char item = d[(_lines[Y][X - 1], _lines[Y + 1][X])];
                    if (item != 'x')
                    {
                        p.Add(item);
                    }
                }
            }
        }

        if (X + 1 < W)
        {
            if (Y - 1 >= 0) // e & n
            {
                var d = new Dictionary<(char, char), char>
                {
                    { ('F', 'F'), 'x' },
                    { ('F', 'J'), 'x' },
                    { ('F', 'L'), 'x' },
                    { ('F', '7'), 'x' },
                    { ('F', '-'), 'x' },
                    { ('F', '|'), 'x' },
                    { ('F', '.'), 'x' },
                    { ('J', 'F'), 'L' },
                    { ('J', 'J'), 'x' },
                    { ('J', 'L'), 'x' },
                    { ('J', '7'), 'L' },
                    { ('J', '-'), 'x' },
                    { ('J', '|'), 'L' },
                    { ('J', '.'), 'x' },
                    { ('L', 'F'), 'x' },
                    { ('L', 'J'), 'x' },
                    { ('L', 'L'), 'x' },
                    { ('L', '7'), 'x' },
                    { ('L', '-'), 'x' },
                    { ('L', '|'), 'x' },
                    { ('L', '.'), 'x' },
                    { ('7', 'F'), 'L' },
                    { ('7', 'J'), 'x' },
                    { ('7', 'L'), 'x' },
                    { ('7', '7'), 'L' },
                    { ('7', '-'), 'x' },
                    { ('7', '|'), 'L' },
                    { ('7', '.'), 'x' },
                    { ('-', 'F'), 'L' },
                    { ('-', 'J'), 'x' },
                    { ('-', 'L'), 'x' },
                    { ('-', '7'), 'L' },
                    { ('-', '-'), 'x' },
                    { ('-', '|'), 'L' },
                    { ('-', '.'), 'x' },
                    { ('|', 'F'), 'x' },
                    { ('|', 'J'), 'x' },
                    { ('|', 'L'), 'x' },
                    { ('|', '7'), 'x' },
                    { ('|', '-'), 'x' },
                    { ('|', '|'), 'x' },
                    { ('|', '.'), 'x' },
                    { ('.', 'F'), 'x' },
                    { ('.', 'J'), 'x' },
                    { ('.', 'L'), 'x' },
                    { ('.', '7'), 'x' },
                    { ('.', '-'), 'x' },
                    { ('.', '|'), 'x' },
                    { ('.', '.'), 'x' }
                };

                if (d.ContainsKey((_lines[Y][X+1], _lines[Y-1][X])))
                {
                    char item = d[(_lines[Y][X+1], _lines[Y-1][X])];
                    if (item != 'x')
                    {
                        p.Add(item);
                    }
                }
            }

            if (Y + 1 < H)  // e & s
            {
                var d = new Dictionary<(char, char), char>
                {
                    { ('F', 'F'), 'x' },
                    { ('F', 'J'), 'x' },
                    { ('F', 'L'), 'x' },
                    { ('F', '7'), 'x' },
                    { ('F', '-'), 'x' },
                    { ('F', '|'), 'x' },
                    { ('F', '.'), 'x' },
                    { ('J', 'F'), 'x' },
                    { ('J', 'J'), 'F' },
                    { ('J', 'L'), 'F' },
                    { ('J', '7'), 'x' },
                    { ('J', '-'), 'x' },
                    { ('J', '|'), 'F' },
                    { ('J', '.'), 'x' },
                    { ('L', 'F'), 'x' },
                    { ('L', 'J'), 'x' },
                    { ('L', 'L'), 'x' },
                    { ('L', '7'), 'x' },
                    { ('L', '-'), 'x' },
                    { ('L', '|'), 'x' },
                    { ('L', '.'), 'x' },
                    { ('7', 'F'), 'x' },
                    { ('7', 'J'), 'F' },
                    { ('7', 'L'), 'F' },
                    { ('7', '7'), 'x' },
                    { ('7', '-'), 'x' },
                    { ('7', '|'), 'F' },
                    { ('7', '.'), 'x' },
                    { ('-', 'F'), 'x' },
                    { ('-', 'J'), 'F' },
                    { ('-', 'L'), 'F' },
                    { ('-', '7'), 'x' },
                    { ('-', '-'), 'x' },
                    { ('-', '|'), 'F' },
                    { ('-', '.'), 'x' },
                    { ('|', 'F'), 'x' },
                    { ('|', 'J'), 'x' },
                    { ('|', 'L'), 'x' },
                    { ('|', '7'), 'x' },
                    { ('|', '-'), 'x' },
                    { ('|', '|'), 'x' },
                    { ('|', '.'), 'x' },
                    { ('.', 'F'), 'x' },
                    { ('.', 'J'), 'x' },
                    { ('.', 'L'), 'x' },
                    { ('.', '7'), 'x' },
                    { ('.', '-'), 'x' },
                    { ('.', '|'), 'x' },
                    { ('.', '.'), 'x' }
                };

                if (d.ContainsKey((_lines[Y][X+1], _lines[Y+1][X])))
                {
                    char item = d[(_lines[Y][X + 1], _lines[Y + 1][X])];
                    if (item != 'x')
                    {
                        p.Add(item);
                    }
                }
            }
        }

        if (Y - 1 >= 0 && Y + 1 < H) // n & s
        {
            var d = new Dictionary<(char, char), char>
            {
                { ('F', 'F'), 'x' },
                { ('F', 'J'), '|' },
                { ('F', 'L'), '|' },
                { ('F', '7'), 'x' },
                { ('F', '-'), 'x' },
                { ('F', '|'), '|' },
                { ('F', '.'), 'x' },
                { ('J', 'F'), 'x' },
                { ('J', 'J'), 'x' },
                { ('J', 'L'), 'x' },
                { ('J', '7'), 'x' },
                { ('J', '-'), 'x' },
                { ('J', '|'), 'x' },
                { ('J', '.'), 'x' },
                { ('L', 'F'), 'x' },
                { ('L', 'J'), 'x' },
                { ('L', 'L'), 'x' },
                { ('L', '7'), 'x' },
                { ('L', '-'), 'x' },
                { ('L', '|'), 'x' },
                { ('L', '.'), 'x' },
                { ('7', 'F'), 'x' },
                { ('7', 'J'), '|' },
                { ('7', 'L'), '|' },
                { ('7', '7'), 'x' },
                { ('7', '-'), 'x' },
                { ('7', '|'), '|' },
                { ('7', '.'), 'x' },
                { ('-', 'F'), 'x' },
                { ('-', 'J'), 'x' },
                { ('-', 'L'), 'x' },
                { ('-', '7'), 'x' },
                { ('-', '-'), 'x' },
                { ('-', '|'), 'x' },
                { ('-', '.'), 'x' },
                { ('|', 'F'), 'x' },
                { ('|', 'J'), '|' },
                { ('|', 'L'), '|' },
                { ('|', '7'), 'x' },
                { ('|', '-'), 'x' },
                { ('|', '|'), '|' },
                { ('|', '.'), 'x' },
                { ('.', 'F'), 'x' },
                { ('.', 'J'), 'x' },
                { ('.', 'L'), 'x' },
                { ('.', '7'), 'x' },
                { ('.', '-'), 'x' },
                { ('.', '|'), 'x' },
                { ('.', '.'), 'x' }
            };

            if (d.ContainsKey((_lines[Y-1][X], _lines[Y+1][X])))
            {
                char item = d[(_lines[Y - 1][X], _lines[Y + 1][X])];
                if (item != 'x')
                {
                    p.Add(item);
                }
            }
        }

        StartingPipe = p.Single();
    }

    public int W => _lines[0].Length;

    public int H => _lines.Length;

    public int X { get; set; }
    public int Y { get; set; }
    public char StartingPipe { get; set; }
}
