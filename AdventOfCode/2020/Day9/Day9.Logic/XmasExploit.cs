using System.Collections.Generic;
using System.Linq;

namespace AdventOfCode2020.Day9.Logic
{
    public class XmasExploit
    {
        private readonly List<long> _preamble;
        private readonly long _invalidValue;

        private bool _contiguousNumbersFound;
        public List<long> ContiguousNumbers { get; private set; }

        public XmasExploit(long[] preamble, int preambleLength)
        {
            _preamble = preamble.ToList();
            ContiguousNumbers = new List<long>();
            _contiguousNumbersFound = false;

            var crypt = new XmasCrypt(preamble, preambleLength);
            _invalidValue = crypt.InvalidValue;
        }

        public long FindExploit()
        {
            var list = _preamble.TakeWhile(p => p != _invalidValue).ToList();
            var index = 2;
            while (!_contiguousNumbersFound && index < list.Count)
            {
                FindGroupOfTwoThatAddsUpToInvalidValueIn(list, index++);
            }

            if (_contiguousNumbersFound)
            {
                return ContiguousNumbers
                    .OrderBy(p => p)
                    .Where((_, i) => i == 0 || i == ContiguousNumbers.Count - 1)
                    .Sum();
            }
            else
            {
                return -1;
            }
       }

        private void FindGroupOfTwoThatAddsUpToInvalidValueIn(List<long> values, int amount)
        {
            for (var index = 0; index < values.Count - amount; index++)
            {
                var subList = values.Skip(index).Take(amount);
                if (subList.Sum() == _invalidValue)
                {
                    ContiguousNumbers = subList.ToList();
                    _contiguousNumbersFound = true;
                    break;
                }
            }
        }
    }
}