using System;
using Xunit;
using Day14.Logic;
using static Day14.UnitTests.Constants;

namespace Day14.UnitTests
{
    public class PolymerizationEquipmentMust
    {
        [Theory]
        [InlineData(null)]
        [InlineData("")]
        [InlineData(" ")]
        public void ThrowException_WhenInitializedWithInvalidTemplate(string invalidInput)
        {
            var exception = Assert.Throws<ArgumentException>(() => PolymerizationEquipment.CreateEquipmentTrackingPolymers(invalidInput));
            Assert.Equal("Invalid input", exception.Message);
        }

        [Theory]
        [InlineData(SAMPLE_INPUT, "NNCB", 16)]
        [InlineData(REAL_INPUT, "VPPHOPVVSFSVFOCOSBKF", 100)]
        public void BeInitializedCorrectly_WhenCorrectInputIsSupplied(string input, string expectedTemplate, int expectedRulesCount)
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(input);
            Assert.Equal(expectedTemplate, sut.PolymerTemplate);
            Assert.Equal(expectedRulesCount, sut.GetPairInsertionRulesCount());
        }

        [Theory]
        [InlineData(1, "NCNBCHB")]
        [InlineData(2, "NBCCNBBBCBHCB")]
        [InlineData(3, "NBBBCNCCNBBNBNBBCHBHHBCHB")]
        [InlineData(4, "NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB")]
        public void ReturnCorrectPolymerTemplate(int steps, string expectedTemplate)
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(SAMPLE_INPUT);
            sut.RunFor(steps);
            Assert.Equal(expectedTemplate, sut.PolymerTemplate);
        }

        [Theory]
        [InlineData(5, 97)]
        [InlineData(10, 3073)]
        public void ReturnCorrectPolymerTemplateLength_AfterSteps(int steps, int expectedLength)
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(SAMPLE_INPUT);
            sut.RunFor(steps);
            Assert.Equal(expectedLength, sut.PolymerTemplate.Length);
        }

        [Fact]
        public void CreatePolymerChainWithCorrectNumberOfPolymers()
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(SAMPLE_INPUT);
            sut.RunFor(10);
            Assert.Equal(1749, sut.CountElementInTemplate("B"));
            Assert.Equal(298, sut.CountElementInTemplate("C"));
            Assert.Equal(161, sut.CountElementInTemplate("H"));
            Assert.Equal(865, sut.CountElementInTemplate("N"));
        }

        [Fact]
        public void GetCorrectSubtractionOnSampleData_WhenTrackingPolymers()
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(SAMPLE_INPUT);
            sut.RunFor(10);
            Assert.Equal(1588, sut.GetSubtraction());
        }

        [Fact]
        public void GetCorretSubtractionOnSampleData_WhenCountingPolymers()
        {
            var sut = PolymerizationEquipment.CreateEquipmentCountingPolymers(SAMPLE_INPUT);
            sut.RunFor(10);
            Assert.Equal(1588, sut.GetSubtraction());
        }

        [Theory]
        [InlineData(1, "VBPKPVHFOKPOVOVVSNFFSVVCFOOOCBOCSNBCKVF")]
        [InlineData(2, "VFBKPVKVPOVNHNFOOVKVPNOCVHOCVOVVSHNPFPFFSVVOVSCPFOOSOSOOCNBKOOCVSHNHBHCHKFVCF")]
        [InlineData(3, "VCFSBCKVPOVCKFVBPNOCVVNBHSNPFOOSOCVCKFVBPPNOOOCNVNHFOOCNVHOCVOVVSNHSNSPKFOPKFPFFSVVOVHOCVVSNCSPKFOOSOCSNOCSNOSOOCHNHBCKSOSOOCNVVSNHSNBHVBPHKCPHCKVFKVSCPF")]
        [InlineData(4, "VSCPFFSNBHCHKFVBPNOCVSCHKVFKVFBKPPNOOOCNVOVVNHBPHNSHNSPKFOOSOCSNOOCNVSCHKVFKVFBKPKPPNOOSOSOOCHNVVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSHNBHNSHNSSPPVKVFOOKPVKVFOPKFPFFSVVOVHOCVNHFOOCNVOVVSHNFCVSPPVKVFOOSOCSNOOCVSHNOOOCVSHNOOCSNOSOOCPHSNBHVBHCHKPSNOCSNOSOOCHNVVOVVSHNBHNSHNHBPHHVFBKPVHCKCCSPVHKCHKFVCFVKFVVSNCSPKF")]
        [InlineData(5, "VVSNCSPKFPFFSHNHBPHKCPHCKVFKVFBKPPNOOOCNVVSNCPHCKFVCFVKFVCFSBCKVPKPPNOOSOSOOCHNVVHOCVOVVNBHVBKPVHSNSSNHSNSSPPVKVFOOSOCSNOOCVSHNOOSOOCHNVVVSNCPHCKFVCFVKFVCFSBCKVPVKVPKPPNOOSOCSNOCSNOSOOCPHSNVVOVOVVNHBPHSNPFOOSOCSNOSOOCPHSNVVOVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSNHSNHBPHSNSSNHSNSSNSPPKPOVCKFVCFOOSOVKVPOVCKFVCFOOKPVKVFOPKFPFFSVVOVHOCVNHFOOCNVVNBHNFOOSOOCHNVVHOCVOVVSNHSNPFHCNVVSPPKPOVCKFVCFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCSPVHNSHNHBPHHVFBPHKCPHCKVPOSHNOOOCVSHNOOCSNOSOOCPHSNVVOVHOCVOVVSNHSNHBPHSNSSNHSNBHVBKPVHOHHVCFSBCKVPOVNHKCHKCCKCVSPPOVNHCKCCPHCKVFKVSCPFKVCKVFKVOVVSHNFCVSPPVKVF")]
        [InlineData(6, "VOVVSHNFCVSPPVKVFOPKFPFFSNHSNBHVBKPVHCKCCSPVHKCHKFVCFVKFVCFSBCKVPKPPNOOSOSOOCHNVVOVVSHNFCSPVHKCHKVFKVSCPFKVCKVFKVSCPFFSNBHCHKFVBPVKVPKPPNOOSOCSNOCSNOSOOCPHSNVVOVNHFOOCNVHOCVOVVNHBPHHVFBCKVPOVNHNSHNSSNSHNBHNSHNSSNSPPKPOVCKFVCFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOCSNOSOOCPHSNVVOVOVVSHNFCSPVHKCHKVFKVSCPFKVCKVFKVSCPFFSNBHCHKFVBPOVCKFVBPVKVPKPPNOOSOCSNOOCVSHNOOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVHOCVOVVNBHVBKPVHNSHNSPKFOOSOCSNOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVOVVNHBPHSNPFOOSOCSNOSOOCPHSNVVOVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSHNBHNSHNBHVBKPVHNSHNSSNSHNBHNSHNSSNSHNSSPPKPVKVPNOCVSCHKVFKVSCPFOOSOCSNOCVCKFVBPNOCVSCHKVFKVSCPFOOSOVKVPOVCKFVCFOOKPVKVFOPKFPFFSVVOVHOCVNHFOOCNVVNBHNFOOSOOCHNVVOVVNHBPHSNPFOOSOCSNOSOOCPHSNVVOVNHFOOCNVHOCVOVVSHNBHNSHNSPKFNHKCHNVVOVVSPPKPVKVPNOCVSCHKVFKVSCPFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCVSPPOVNHSNSSNHSNBHVBKPVHOHHVCFSBKPVHCKCCSPVHKCHKFVBPNOCSNHSNOOSOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVNHFOOCNVHOCVOVVSHNBHNSHNBHVBKPVHNSHNSSNSHNBHNSHNHBPHHVFBCKVPOVNHFOKHOHHVSCPFFSNBHCHKFVBPNOCVVNBHCKCCPHCKCCKCHKCCNVVSPPKPNOCVVNBHKCHKCCKCSPVHKCHKFVCFVKFVVSNCSPKFVKFVSCHKFVCFVKFVHOCVOVVSNHSNPFHCNVVSPPKPOVCKFVCF")]
        [InlineData(7, "VHOCVOVVSNHSNPFHCNVVSPPKPOVCKFVCFOOKPVKVFOPKFPFFSHNBHNSHNHBPHHVFBCKVPOVNHKCHKCCKCVSPPOVNHCKCCPHCKVFKVSCPFKVCKVFKVSCPFFSNBHCHKFVBPVKVPKPPNOOSOCSNOCSNOSOOCPHSNVVOVHOCVOVVSNHSNPFHCVSPPOVNHCKCCPHCKFVCFVKFVVSNCSPKFVKFVSCHKFVCFVKFVVSNCSPKFPFFSHNHBPHKCPHCKVFKVFBKPOVCKFVBPVKVPKPPNOOSOCSNOOCVSHNOOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVNBHVBKPVHOHHVCFSBHCHKFVBPNOCVVNBHSNSSNHSNSSNSHNSSNHSNHBPHSNSSNHSNSSNSHNSSPPKPVKVPNOCVSCHKVFKVSCPFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVHOCVOVVSNHSNPFHCVSPPOVNHCKCCPHCKFVCFVKFVVSNCSPKFVKFVSCHKFVCFVKFVVSNCSPKFPFFSHNHBPHKCPHCKVFKVFBKPNOCVSCHKVFKVFBKPOVCKFVBPVKVPKPPNOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCVSPPOVNHSNSSNHSNVVOVHOCVNHFOOCNVNHFOOCNVHOCVOVVNHBPHHVFBCKVPOVNHSNSSNHSNSSPPVKVFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCVSPPOVNHSNSSNHSNVVOVHOCVNHFOOCNVHOCVOVVNBHVBKPVHNSHNSPKFOOSOCSNOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVOVVNHBPHSNPFOOSOCSNOSOOCPHSNVVOVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSNHSNHBPHSNSSNHSNHBPHHVFBCKVPOVNHSNSSNHSNSSNSHNSSNHSNHBPHSNSSNHSNSSNSHNSSNHSNSSNSPPKPVKVPOVCKFVBPPNOOOCNVVSNCPHCKFVCFVKFVVSNCSPKFOOSOCSNOOCVSHNOOOCNVSCHKVFKVFBKPPNOOOCNVVSNCPHCKFVCFVKFVVSNCSPKFOOSOCSNOCVCKFVBPNOCVSCHKVFKVSCPFOOSOVKVPOVCKFVCFOOKPVKVFOPKFPFFSVVOVHOCVNHFOOCNVVNBHNFOOSOOCHNVVOVVNHBPHSNPFOOSOCSNOSOOCPHSNVVOVHOCVOVVNBHVBKPVHNSHNSPKFOOSOCSNOOCVSHNOOCSNOSOOCSPVHNSHNVVOVHOCVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSNHSNHBPHSNSSNHSNSSPPVKVFONBHCKCCPHSNVVOVHOCVOVVSPPKPVKVPOVCKFVBPPNOOOCNVVSNCPHCKFVCFVKFVVSNCSPKFOOSOCSNOOCVSHNOOSOOCNVVSNHSNOOSOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOOCVSHNOOCSNOSOOCPHSNVVOVHOCVOVVSNHSNHBPHSNSSNHSNOOSOCSNOOCVSHNOOOCVSHNOOCSNOSOOCPHSNVVOVHOCVOVVSNHSNHBPHSNSSNHSNOOSOCSNOOCVSHNOOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCNVVSPPKPNOCVVNBHNSHNSSNSHNBHNSHNHBPHHVFBCKVPOVNHFOKHOHHVSCPFFSNBCKVPOVNHKCHKCCKCVSPPOVNHCKCCPHCKVFKVFBKPPNOOOCVSHNBHNSHNOOSOCSNOCSNOSOOCHNVVOVVSHNBHNSHNOOSOCSNOSOOCNVVSNHSNOOSOOCVSHNOOCSNOSOOCVSPPOVNHSNSSNHSNVVOVHOCVNHFOOCNVVNBHNFOOSOOCHNVVNHFOOCNVHOCVOVVSNHSNHBPHSNSSNHSNHBPHHVFBCKVPOVNHSNSSNHSNSSNSHNSSNHSNHBPHSNSSNHSNBHVBKPVHOHHVCFSBHCHKFVBPNOCVVNBHNFOOVKBHFOKHOHHVVSNCSPKFPFFSHNHBPHKCPHCKVFKVFBKPPNOOOCNVOVVNHBPHKCHKCCKCSPVHKCHKCCKCHKCCPHCKCCKCHNVVOVVSPPKPVKVPPNOOOCNVOVVNHBPHCKCCPHCKCCKCHKCCVSPPOVNHCKCCPHCKVFKVSCPFKVCKVFKVOVVSHNFCVSPPVKVFKVCKVFKVVSNCPHCKVFKVSCPFKVCKVFKVNHFOOCNVHOCVOVVSHNBHNSHNSPKFNHKCHNVVOVVSPPKPVKVPNOCVSCHKVFKVSCPF")]
        public void TrackPolymerCorrectly_WhenUsingRealInput(int steps, string expectedTemplate)
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(REAL_INPUT);
            sut.RunFor(steps);
            Assert.Equal(expectedTemplate, sut.PolymerTemplate);
        }

        [Fact]
        public void SolveFirstPuzzle_WhenTrackingPolymers()
        {
            var sut = PolymerizationEquipment.CreateEquipmentTrackingPolymers(REAL_INPUT);
            sut.RunFor(10);
            Assert.Equal(2233, sut.GetSubtraction());
        }

        [Fact]
        public void SolveFirstPuzzle_WhenCountingPolymers()
        {
            var sut = PolymerizationEquipment.CreateEquipmentCountingPolymers(REAL_INPUT);
            sut.RunFor(10);
            Assert.Equal(2233, sut.GetSubtraction());
        }

        [Fact]
        public void CalculateTemplatePolymerCorrectly_WhenApplyingFortySteps()
        {
            var sut = PolymerizationEquipment.CreateEquipmentCountingPolymers(SAMPLE_INPUT);
            sut.RunFor(40);
            Assert.Equal(2188189693529, sut.GetSubtraction());
        }

        [Fact]
        public void SolveSecondPuzzle()
        {
            var sut = PolymerizationEquipment.CreateEquipmentCountingPolymers(REAL_INPUT);
            sut.RunFor(40);
            Assert.Equal(2884513602164, sut.GetSubtraction());
        }
    }
}