using Day16.Logic;
using static Day16.UnitTests.Constants;

namespace Day16.UnitTests;

public class PressureReleaseValveMust
{

    /*
     *  AA <--> BB
     *
     *      +---+---+
     *      | A | B |
     *  +---+---+---+
     *  | A | 0 | 1 |
     *  +---+---+---+
     *  | B | 1 | 0 |
     *  +---+---+---+
     */
    [Theory]
    [InlineData("Valve AA has flow rate=0; tunnels lead to valves BB\nValve BB has flow rate=0; tunnels lead to valves AA", 0)]
    [InlineData("Valve AA has flow rate=0; tunnels lead to valves BB\nValve BB has flow rate=13; tunnels lead to valves AA", 28 * 13)]
    public void LoadInputCorrectly(string input, int expectedPressureRelease)
    {
        var graphParser = new GraphParser(input);
        var sut = new PressureReleaseValve3(input, graphParser.Graph, graphParser.Names, graphParser.Flows, 1);
        Assert.Equal(expectedPressureRelease, sut.ReleasedPressure);
    }

    /*
     *  AA <--> BB <--> CC
     *   ^               ^
     *   |               |
     *   V               |
     *  DD <-------------+
     *
     *      +---+---+---+---+
     *      | A | B | C | D |
     *  +---+---+---+---+---+
     *  | A | 0 | 1 | 2 | 1 |
     *  +---+---+---+---+---+
     *  | B | 1 | 0 | 1 | 2 |
     *  +---+---+---+---+---+
     *  | C | 2 | 1 | 0 | 1 |
     *  +---+---+---+---+---+
     *  | D | 1 | 2 | 1 | 0 |
     *  +---+---+---+---+---+
     */
    [Fact]
    public void CalculateBestPathCorrectly_WhenNoSkipsAreNecessary()
    {
        const string input = @"Valve AA has flow rate=0; tunnels lead to valves DD, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=22; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA";

        /*
         * == Minute 1 ==
         * No valves are open.
         * You move to valve DD
         *
         * == Minute 2 ==
         * No valves are open.
         * You open valve DD
         *
         * == Minute 3 ==
         * Valve DD is open, releasing 20 pressure
         * You move to valve CC
         *
         * == Minute 4 ==
         * Valve DD is open, releasing 20 pressure
         * You open valve CC
         *
         * == Minute 5 ==
         * Valves CC and DD are open, releasing 42 pressure
         * You move to valve BB
         *
         * == Minute 6 ==
         * Valves CC and DD are open, releasing 42 pressure
         * You open valve BB
         *
        * == Minute 7..30 ==
         * Valves BB, CC and DD are open, releasing 55 pressure
         *
         * Total: 24 * 55 + 2 * 42 + 2 * 20 = 1444
         * Total: 28 * 20 + 26 * 22 + 24 * 13 = 1444
         */
        var graphParser = new GraphParser(input);
        var sut = new PressureReleaseValve3(input, graphParser.Graph, graphParser.Names, graphParser.Flows, 1);
        Assert.Equal(1444, sut.ReleasedPressure);
    }

    /*
     *  AA <--> BB <--> CC
     *   ^               ^
     *   |               |
     *   V               |
     *  DD <-------------+
     *
     *      +---+---+---+---+
     *      | A | B | C | D |
     *  +---+---+---+---+---+
     *  | A | 0 | 1 | 2 | 1 |
     *  +---+---+---+---+---+
     *  | B | 1 | 0 | 1 | 2 |
     *  +---+---+---+---+---+
     *  | C | 2 | 1 | 0 | 1 |
     *  +---+---+---+---+---+
     *  | D | 1 | 2 | 1 | 0 |
     *  +---+---+---+---+---+
     */
    [Fact]
    public void CalculateBestPathCorrectly_WhenSkipsAreNecessary()
    {
        const string input = @"Valve AA has flow rate=0; tunnels lead to valves DD, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA";

        /*
         * == Minute 1 ==
         * No valves are open.
         * You move to valve DD
         *
         * == Minute 2 ==
         * No valves are open.
         * You open valve DD
         *
         * == Minute 3 ==
         * Valve DD is open, releasing 20 pressure
         * You move to valve CC
         *
         * == Minute 4 ==
         * Valve DD is open, releasing 20 pressure
         * You move to valve BB
         *
         * == Minute 5 ==
         * Valve DD is open, releasing 20 pressure
         * You open valve BB
         *
         * == Minute 6 ==
         * Valve DD and BB are open, releasing 33 pressure
         * You move to valve CC
         *
         * == Minute 7 ==
         * Valve DD and BB are open, releasing 33 pressure
         * You open valve CC
         *
         * == Minute 8..30 ==
         * Valve BB, CC and DD are open, releasing 35 presure
         *
         * Total: 23 * 35 + 33 * 2 + 20 * 3 = 931
         */
        var graphParser = new GraphParser(input);
        var sut = new PressureReleaseValve3(input, graphParser.Graph, graphParser.Names, graphParser.Flows, 1);
        Assert.Equal(931, sut.ReleasedPressure);
    }

    [Fact]
    public void SolveFirstSample_WhenUsingGraphParser()
    {
        var graphParser = new GraphParser(SAMPLE_INPUT);
        var sut = new PressureReleaseValve3(SAMPLE_INPUT, graphParser.Graph, graphParser.Names, graphParser.Flows, 1);
        Assert.Equal(1651, sut.ReleasedPressure);
    }

    [Fact]
    public void SolveFirstPuzzle()
    {
        var sut = new PressureReleaseValve3(PUZZLE_INPUT, 
            new int[][] {
                new[] { 0, 7, 5, 3, 3, 6, 7, 5, 4, 4, 5, 3, 2, 4, 7, 6, 5, 8, 3, 9, 7, 7, 1, 4, 2, 4, 4, 6, 1, 8, 9, 1, 8, 9, 3, 4, 3, 2, 6, 3, 6, 7, 3, 5, 8, 1, 7, 9, 5, 2, 3, 3, 1, 8, 4, 8, 2, 4, 4 },
                new[] { 7, 0, 11, 9, 7, 12, 13, 2, 10, 5, 11, 7, 6, 8, 13, 1, 6, 14, 5, 15, 13, 13, 6, 6, 5, 10, 5, 12, 8, 14, 15, 8, 14, 2, 9, 8, 4, 8, 12, 7, 7, 13, 7, 11, 1, 8, 13, 15, 9, 8, 8, 9, 7, 14, 10, 14, 9, 8, 3 },
                new[] { 5, 11, 0, 2, 4, 1, 3, 9, 5, 8, 2, 6, 5, 7, 4, 10, 9, 3, 6, 5, 4, 2, 6, 6, 7, 1, 7, 3, 4, 3, 4, 6, 5, 13, 4, 6, 7, 6, 3, 6, 10, 4, 5, 2, 12, 6, 3, 4, 8, 3, 4, 6, 6, 5, 7, 5, 7, 6, 8 },
                new[] { 3, 9, 2, 0, 2, 3, 4, 7, 3, 6, 2, 4, 3, 5, 4, 8, 7, 5, 4, 6, 4, 4, 4, 4, 5, 1, 5, 3, 2, 5, 6, 4, 5, 11, 2, 4, 5, 4, 3, 4, 8, 4, 3, 2, 10, 4, 4, 6, 6, 1, 2, 4, 4, 5, 5, 5, 5, 4, 6 },
                new[] { 3, 7, 4, 2, 0, 5, 6, 5, 3, 4, 4, 2, 1, 3, 6, 6, 5, 7, 2, 8, 6, 6, 4, 4, 4, 3, 4, 5, 2, 7, 8, 4, 7, 9, 2, 4, 3, 4, 5, 2, 6, 6, 3, 4, 8, 4, 6, 8, 4, 1, 2, 4, 2, 7, 5, 7, 5, 3, 4 },
                new[] { 6, 12, 1, 3, 5, 0, 2, 10, 6, 9, 3, 7, 6, 8, 4, 11, 10, 2, 7, 4, 4, 1, 7, 7, 8, 2, 8, 3, 5, 2, 3, 7, 4, 14, 5, 7, 8, 7, 3, 7, 11, 4, 6, 3, 13, 7, 2, 3, 9, 4, 5, 7, 7, 4, 8, 5, 8, 7, 9 },
                new[] { 7, 13, 3, 4, 6, 2, 0, 11, 7, 10, 4, 8, 7, 9, 4, 12, 11, 2, 8, 4, 2, 1, 8, 8, 9, 3, 9, 3, 6, 2, 3, 8, 3, 15, 6, 8, 9, 8, 1, 8, 12, 2, 7, 2, 14, 8, 2, 3, 10, 5, 6, 8, 8, 4, 9, 3, 9, 8, 10 },
                new[] { 5, 2, 9, 7, 5, 10, 11, 0, 8, 3, 9, 5, 4, 6, 11, 1, 4, 12, 3, 13, 11, 11, 4, 4, 3, 8, 3, 10, 6, 12, 13, 6, 12, 4, 7, 6, 2, 6, 10, 5, 5, 11, 5, 9, 3, 6, 11, 13, 7, 6, 6, 7, 5, 12, 8, 12, 7, 6, 1 },
                new[] { 4, 10, 5, 3, 3, 6, 7, 8, 0, 7, 5, 5, 4, 4, 7, 9, 8, 8, 5, 9, 7, 7, 5, 4, 6, 4, 5, 6, 3, 8, 9, 5, 8, 12, 1, 2, 6, 4, 6, 5, 9, 7, 3, 5, 11, 3, 7, 9, 3, 2, 3, 1, 5, 8, 2, 8, 2, 4, 7 },
                new[] { 4, 5, 8, 6, 4, 9, 10, 3, 7, 0, 8, 4, 3, 5, 10, 4, 1, 11, 2, 12, 10, 10, 3, 3, 2, 7, 2, 9, 5, 11, 12, 5, 11, 7, 6, 5, 1, 5, 9, 4, 2, 10, 4, 8, 6, 5, 10, 12, 6, 5, 5, 6, 4, 11, 7, 11, 6, 5, 2 },
                new[] { 5, 11, 2, 2, 4, 3, 4, 9, 5, 8, 0, 6, 5, 7, 2, 10, 9, 4, 6, 6, 4, 3, 6, 6, 7, 1, 7, 1, 4, 4, 5, 6, 5, 13, 4, 6, 7, 6, 3, 6, 10, 4, 5, 2, 12, 6, 2, 4, 8, 3, 4, 6, 6, 3, 7, 5, 7, 6, 8 },
                new[] { 3, 7, 6, 4, 2, 7, 8, 5, 5, 4, 6, 0, 1, 1, 8, 6, 5, 9, 2, 10, 8, 8, 4, 5, 4, 5, 4, 7, 4, 9, 10, 4, 9, 9, 4, 5, 3, 5, 7, 2, 6, 8, 4, 6, 8, 4, 8, 10, 2, 3, 4, 4, 2, 9, 3, 9, 5, 3, 4 },
                new[] { 2, 6, 5, 3, 1, 6, 7, 4, 4, 3, 5, 1, 0, 2, 7, 5, 4, 8, 1, 9, 7, 7, 3, 4, 3, 4, 3, 6, 3, 8, 9, 3, 8, 8, 3, 4, 2, 4, 6, 1, 5, 7, 3, 5, 7, 3, 7, 9, 3, 2, 3, 5, 1, 8, 4, 8, 4, 2, 3 },
                new[] { 4, 8, 7, 5, 3, 8, 9, 6, 4, 5, 7, 1, 2, 0, 9, 7, 6, 10, 3, 11, 9, 9, 5, 6, 5, 6, 5, 8, 5, 10, 11, 5, 10, 10, 5, 4, 4, 6, 8, 3, 7, 9, 5, 7, 9, 5, 9, 11, 1, 4, 5, 3, 3, 10, 2, 10, 4, 4, 5 },
                new[] { 7, 13, 4, 4, 6, 4, 4, 11, 7, 10, 2, 8, 7, 9, 0, 12, 11, 4, 8, 6, 6, 3, 8, 8, 9, 3, 9, 1, 6, 3, 5, 8, 3, 15, 6, 8, 9, 8, 5, 8, 12, 4, 7, 4, 14, 8, 2, 2, 10, 5, 6, 8, 8, 1, 9, 7, 9, 8, 10 },
                new[] { 6, 1, 10, 8, 6, 11, 12, 1, 9, 4, 10, 6, 5, 7, 12, 0, 5, 13, 4, 14, 12, 12, 5, 5, 4, 9, 4, 11, 7, 13, 14, 7, 13, 3, 8, 7, 3, 7, 11, 6, 6, 12, 6, 10, 2, 7, 12, 14, 8, 7, 7, 8, 6, 13, 9, 13, 8, 7, 2 },
                new[] { 5, 6, 9, 7, 5, 10, 11, 4, 8, 1, 9, 5, 4, 6, 11, 5, 0, 12, 3, 13, 11, 11, 4, 4, 3, 8, 3, 10, 6, 12, 13, 6, 12, 8, 7, 6, 2, 6, 10, 5, 1, 11, 5, 9, 7, 6, 11, 13, 7, 6, 6, 7, 5, 12, 8, 12, 7, 6, 3 },
                new[] { 8, 14, 3, 5, 7, 2, 2, 12, 8, 11, 4, 9, 8, 10, 4, 13, 12, 0, 9, 2, 4, 1, 9, 9, 10, 4, 10, 3, 7, 2, 1, 9, 4, 16, 7, 9, 10, 9, 3, 9, 13, 4, 8, 4, 15, 9, 2, 3, 11, 6, 7, 9, 9, 4, 10, 3, 10, 9, 11 },
                new[] { 3, 5, 6, 4, 2, 7, 8, 3, 5, 2, 6, 2, 1, 3, 8, 4, 3, 9, 0, 10, 8, 8, 3, 3, 2, 5, 2, 7, 4, 9, 10, 4, 9, 7, 4, 5, 1, 5, 7, 2, 4, 8, 4, 6, 6, 4, 8, 10, 4, 3, 4, 6, 2, 9, 5, 9, 5, 3, 2 },
                new[] { 9, 15, 5, 6, 8, 4, 4, 13, 9, 12, 6, 10, 9, 11, 6, 14, 13, 2, 10, 0, 2, 3, 10, 10, 11, 5, 11, 5, 8, 4, 1, 10, 5, 17, 8, 10, 11, 10, 3, 10, 14, 4, 9, 4, 16, 10, 4, 5, 12, 7, 8, 10, 10, 6, 11, 1, 11, 10, 12 },
                new[] { 7, 13, 4, 4, 6, 4, 2, 11, 7, 10, 4, 8, 7, 9, 6, 12, 11, 4, 8, 2, 0, 3, 8, 8, 9, 3, 9, 5, 6, 4, 3, 8, 3, 15, 6, 8, 9, 8, 1, 8, 12, 2, 7, 2, 14, 8, 4, 4, 10, 5, 6, 8, 8, 5, 9, 1, 9, 8, 10 },
                new[] { 7, 13, 2, 4, 6, 1, 1, 11, 7, 10, 3, 8, 7, 9, 3, 12, 11, 1, 8, 3, 3, 0, 8, 8, 9, 3, 9, 2, 6, 1, 2, 8, 3, 15, 6, 8, 9, 8, 2, 8, 12, 3, 7, 3, 14, 8, 1, 2, 10, 5, 6, 8, 8, 3, 9, 4, 9, 8, 10 },
                new[] { 1, 6, 6, 4, 4, 7, 8, 4, 5, 3, 6, 4, 3, 5, 8, 5, 4, 9, 3, 10, 8, 8, 0, 4, 1, 5, 3, 7, 2, 9, 10, 2, 9, 8, 4, 5, 2, 3, 7, 4, 5, 8, 4, 6, 7, 2, 8, 10, 6, 3, 4, 4, 2, 9, 5, 9, 3, 5, 3 },
                new[] { 4, 6, 6, 4, 4, 7, 8, 4, 4, 3, 6, 5, 4, 6, 8, 5, 4, 9, 3, 10, 8, 8, 4, 0, 3, 5, 1, 7, 4, 9, 10, 3, 9, 8, 4, 2, 2, 2, 7, 3, 5, 8, 1, 6, 7, 5, 8, 10, 5, 3, 2, 3, 5, 9, 4, 9, 4, 2, 3 },
                new[] { 2, 5, 7, 5, 4, 8, 9, 3, 6, 2, 7, 4, 3, 5, 9, 4, 3, 10, 2, 11, 9, 9, 1, 3, 0, 6, 2, 8, 3, 10, 11, 3, 10, 7, 5, 5, 1, 4, 8, 4, 4, 9, 4, 7, 6, 3, 9, 11, 6, 4, 5, 5, 3, 10, 6, 10, 4, 5, 2 },
                new[] { 4, 10, 1, 1, 3, 2, 3, 8, 4, 7, 1, 5, 4, 6, 3, 9, 8, 4, 5, 5, 3, 3, 5, 5, 6, 0, 6, 2, 3, 4, 5, 5, 4, 12, 3, 5, 6, 5, 2, 5, 9, 3, 4, 1, 11, 5, 3, 5, 7, 2, 3, 5, 5, 4, 6, 4, 6, 5, 7 },
                new[] { 4, 5, 7, 5, 4, 8, 9, 3, 5, 2, 7, 4, 3, 5, 9, 4, 3, 10, 2, 11, 9, 9, 3, 1, 2, 6, 0, 8, 5, 10, 11, 4, 10, 7, 5, 3, 1, 3, 8, 4, 4, 9, 2, 7, 6, 5, 9, 11, 6, 4, 3, 4, 4, 10, 5, 10, 5, 3, 2 },
                new[] { 6, 12, 3, 3, 5, 3, 3, 10, 6, 9, 1, 7, 6, 8, 1, 11, 10, 3, 7, 5, 5, 2, 7, 7, 8, 2, 8, 0, 5, 3, 4, 7, 4, 14, 5, 7, 8, 7, 4, 7, 11, 5, 6, 3, 13, 7, 1, 3, 9, 4, 5, 7, 7, 2, 8, 6, 8, 7, 9 },
                new[] { 1, 8, 4, 2, 2, 5, 6, 6, 3, 5, 4, 4, 3, 5, 6, 7, 6, 7, 4, 8, 6, 6, 2, 4, 3, 3, 5, 5, 0, 7, 8, 2, 7, 10, 2, 4, 4, 3, 5, 4, 7, 6, 3, 4, 9, 2, 6, 8, 6, 1, 2, 4, 2, 7, 5, 7, 3, 4, 5 },
                new[] { 8, 14, 3, 5, 7, 2, 2, 12, 8, 11, 4, 9, 8, 10, 3, 13, 12, 2, 9, 4, 4, 1, 9, 9, 10, 4, 10, 3, 7, 0, 3, 9, 2, 16, 7, 9, 10, 9, 3, 9, 13, 3, 8, 4, 15, 9, 2, 1, 11, 6, 7, 9, 9, 2, 10, 5, 10, 9, 11 },
                new[] { 9, 15, 4, 6, 8, 3, 3, 13, 9, 12, 5, 10, 9, 11, 5, 14, 13, 1, 10, 1, 3, 2, 10, 10, 11, 5, 11, 4, 8, 3, 0, 10, 5, 17, 8, 10, 11, 10, 4, 10, 14, 5, 9, 5, 16, 10, 3, 4, 12, 7, 8, 10, 10, 5, 11, 2, 11, 10, 12 },
                new[] { 1, 8, 6, 4, 4, 7, 8, 6, 5, 5, 6, 4, 3, 5, 8, 7, 6, 9, 4, 10, 8, 8, 2, 3, 3, 5, 4, 7, 2, 9, 10, 0, 9, 10, 4, 3, 4, 1, 7, 4, 7, 8, 2, 6, 9, 2, 8, 10, 6, 3, 3, 4, 2, 9, 5, 9, 3, 3, 5 },
                new[] { 8, 14, 5, 5, 7, 4, 3, 12, 8, 11, 5, 9, 8, 10, 3, 13, 12, 4, 9, 5, 3, 3, 9, 9, 10, 4, 10, 4, 7, 2, 5, 9, 0, 16, 7, 9, 10, 9, 2, 9, 13, 1, 8, 3, 15, 9, 4, 1, 11, 6, 7, 9, 9, 2, 10, 4, 10, 9, 11 },
                new[] { 9, 2, 13, 11, 9, 14, 15, 4, 12, 7, 13, 9, 8, 10, 15, 3, 8, 16, 7, 17, 15, 15, 8, 8, 7, 12, 7, 14, 10, 16, 17, 10, 16, 0, 11, 10, 6, 10, 14, 9, 9, 15, 9, 13, 1, 10, 15, 17, 11, 10, 10, 11, 9, 16, 12, 16, 11, 10, 5 },
                new[] { 3, 9, 4, 2, 2, 5, 6, 7, 1, 6, 4, 4, 3, 5, 6, 8, 7, 7, 4, 8, 6, 6, 4, 4, 5, 3, 5, 5, 2, 7, 8, 4, 7, 11, 0, 3, 5, 4, 5, 4, 8, 6, 3, 4, 10, 4, 6, 8, 4, 1, 2, 2, 4, 7, 3, 7, 3, 4, 6 },
                new[] { 4, 8, 6, 4, 4, 7, 8, 6, 2, 5, 6, 5, 4, 4, 8, 7, 6, 9, 5, 10, 8, 8, 5, 2, 5, 5, 3, 7, 4, 9, 10, 3, 9, 10, 3, 0, 4, 2, 7, 3, 7, 8, 1, 6, 9, 3, 8, 10, 3, 3, 2, 1, 5, 9, 2, 9, 2, 2, 5 },
                new[] { 3, 4, 7, 5, 3, 8, 9, 2, 6, 1, 7, 3, 2, 4, 9, 3, 2, 10, 1, 11, 9, 9, 2, 2, 1, 6, 1, 8, 4, 10, 11, 4, 10, 6, 5, 4, 0, 4, 8, 3, 3, 9, 3, 7, 5, 4, 9, 11, 5, 4, 4, 5, 3, 10, 6, 10, 5, 4, 1 },
                new[] { 2, 8, 6, 4, 4, 7, 8, 6, 4, 5, 6, 5, 4, 6, 8, 7, 6, 9, 5, 10, 8, 8, 3, 2, 4, 5, 3, 7, 3, 9, 10, 1, 9, 10, 4, 2, 4, 0, 7, 3, 7, 8, 1, 6, 9, 3, 8, 10, 5, 3, 2, 3, 3, 9, 4, 9, 4, 2, 5 },
                new[] { 6, 12, 3, 3, 5, 3, 1, 10, 6, 9, 3, 7, 6, 8, 5, 11, 10, 3, 7, 3, 1, 2, 7, 7, 8, 2, 8, 4, 5, 3, 4, 7, 2, 14, 5, 7, 8, 7, 0, 7, 11, 1, 6, 1, 13, 7, 3, 3, 9, 4, 5, 7, 7, 4, 8, 2, 8, 7, 9 },
                new[] { 3, 7, 6, 4, 2, 7, 8, 5, 5, 4, 6, 2, 1, 3, 8, 6, 5, 9, 2, 10, 8, 8, 4, 3, 4, 5, 4, 7, 4, 9, 10, 4, 9, 9, 4, 3, 3, 3, 7, 0, 6, 8, 2, 6, 8, 4, 8, 10, 4, 3, 3, 4, 2, 9, 5, 9, 5, 1, 4 },
                new[] { 6, 7, 10, 8, 6, 11, 12, 5, 9, 2, 10, 6, 5, 7, 12, 6, 1, 13, 4, 14, 12, 12, 5, 5, 4, 9, 4, 11, 7, 13, 14, 7, 13, 9, 8, 7, 3, 7, 11, 6, 0, 12, 6, 10, 8, 7, 12, 14, 8, 7, 7, 8, 6, 13, 9, 13, 8, 7, 4 },
                new[] { 7, 13, 4, 4, 6, 4, 2, 11, 7, 10, 4, 8, 7, 9, 4, 12, 11, 4, 8, 4, 2, 3, 8, 8, 9, 3, 9, 5, 6, 3, 5, 8, 1, 15, 6, 8, 9, 8, 1, 8, 12, 0, 7, 2, 14, 8, 4, 2, 10, 5, 6, 8, 8, 3, 9, 3, 9, 8, 10 },
                new[] { 3, 7, 5, 3, 3, 6, 7, 5, 3, 4, 5, 4, 3, 5, 7, 6, 5, 8, 4, 9, 7, 7, 4, 1, 4, 4, 2, 6, 3, 8, 9, 2, 8, 9, 3, 1, 3, 1, 6, 2, 6, 7, 0, 5, 8, 4, 7, 9, 4, 2, 1, 2, 4, 8, 3, 8, 3, 1, 4 },
                new[] { 5, 11, 2, 2, 4, 3, 2, 9, 5, 8, 2, 6, 5, 7, 4, 10, 9, 4, 6, 4, 2, 3, 6, 6, 7, 1, 7, 3, 4, 4, 5, 6, 3, 13, 4, 6, 7, 6, 1, 6, 10, 2, 5, 0, 12, 6, 4, 4, 8, 3, 4, 6, 6, 5, 7, 3, 7, 6, 8 },
                new[] { 8, 1, 12, 10, 8, 13, 14, 3, 11, 6, 12, 8, 7, 9, 14, 2, 7, 15, 6, 16, 14, 14, 7, 7, 6, 11, 6, 13, 9, 15, 16, 9, 15, 1, 10, 9, 5, 9, 13, 8, 8, 14, 8, 12, 0, 9, 14, 16, 10, 9, 9, 10, 8, 15, 11, 15, 10, 9, 4 },
                new[] { 1, 8, 6, 4, 4, 7, 8, 6, 3, 5, 6, 4, 3, 5, 8, 7, 6, 9, 4, 10, 8, 8, 2, 5, 3, 5, 5, 7, 2, 9, 10, 2, 9, 10, 4, 3, 4, 3, 7, 4, 7, 8, 4, 6, 9, 0, 8, 10, 4, 3, 4, 2, 2, 9, 3, 9, 1, 5, 5 },
                new[] { 7, 13, 3, 4, 6, 2, 2, 11, 7, 10, 2, 8, 7, 9, 2, 12, 11, 2, 8, 4, 4, 1, 8, 8, 9, 3, 9, 1, 6, 2, 3, 8, 4, 15, 6, 8, 9, 8, 3, 8, 12, 4, 7, 4, 14, 8, 0, 3, 10, 5, 6, 8, 8, 3, 9, 5, 9, 8, 10 },
                new[] { 9, 15, 4, 6, 8, 3, 3, 13, 9, 12, 4, 10, 9, 11, 2, 14, 13, 3, 10, 5, 4, 2, 10, 10, 11, 5, 11, 3, 8, 1, 4, 10, 1, 17, 8, 10, 11, 10, 3, 10, 14, 2, 9, 4, 16, 10, 3, 0, 12, 7, 8, 10, 10, 1, 11, 5, 11, 10, 12 },
                new[] { 5, 9, 8, 6, 4, 9, 10, 7, 3, 6, 8, 2, 3, 1, 10, 8, 7, 11, 4, 12, 10, 10, 6, 5, 6, 7, 6, 9, 6, 11, 12, 6, 11, 11, 4, 3, 5, 5, 9, 4, 8, 10, 4, 8, 10, 4, 10, 12, 0, 5, 5, 2, 4, 11, 1, 11, 3, 5, 6 },
                new[] { 2, 8, 3, 1, 1, 4, 5, 6, 2, 5, 3, 3, 2, 4, 5, 7, 6, 6, 3, 7, 5, 5, 3, 3, 4, 2, 4, 4, 1, 6, 7, 3, 6, 10, 1, 3, 4, 3, 4, 3, 7, 5, 2, 3, 9, 3, 5, 7, 5, 0, 1, 3, 3, 6, 4, 6, 4, 3, 5 },
                new[] { 3, 8, 4, 2, 2, 5, 6, 6, 3, 5, 4, 4, 3, 5, 6, 7, 6, 7, 4, 8, 6, 6, 4, 2, 5, 3, 3, 5, 2, 7, 8, 3, 7, 10, 2, 2, 4, 2, 5, 3, 7, 6, 1, 4, 9, 4, 6, 8, 5, 1, 0, 3, 4, 7, 4, 7, 4, 2, 5 },
                new[] { 3, 9, 6, 4, 4, 7, 8, 7, 1, 6, 6, 4, 5, 3, 8, 8, 7, 9, 6, 10, 8, 8, 4, 3, 5, 5, 4, 7, 4, 9, 10, 4, 9, 11, 2, 1, 5, 3, 7, 4, 8, 8, 2, 6, 10, 2, 8, 10, 2, 3, 3, 0, 4, 9, 1, 9, 1, 3, 6 },
                new[] { 1, 7, 6, 4, 2, 7, 8, 5, 5, 4, 6, 2, 1, 3, 8, 6, 5, 9, 2, 10, 8, 8, 2, 5, 3, 5, 4, 7, 2, 9, 10, 2, 9, 9, 4, 5, 3, 3, 7, 2, 6, 8, 4, 6, 8, 2, 8, 10, 4, 3, 4, 4, 0, 9, 5, 9, 3, 3, 4 },
                new[] { 8, 14, 5, 5, 7, 4, 4, 12, 8, 11, 3, 9, 8, 10, 1, 13, 12, 4, 9, 6, 5, 3, 9, 9, 10, 4, 10, 2, 7, 2, 5, 9, 2, 16, 7, 9, 10, 9, 4, 9, 13, 3, 8, 5, 15, 9, 3, 1, 11, 6, 7, 9, 9, 0, 10, 6, 10, 9, 11 },
                new[] { 4, 10, 7, 5, 5, 8, 9, 8, 2, 7, 7, 3, 4, 2, 9, 9, 8, 10, 5, 11, 9, 9, 5, 4, 6, 6, 5, 8, 5, 10, 11, 5, 10, 12, 3, 2, 6, 4, 8, 5, 9, 9, 3, 7, 11, 3, 9, 11, 1, 4, 4, 1, 5, 10, 0, 10, 2, 4, 7 },
                new[] { 8, 14, 5, 5, 7, 5, 3, 12, 8, 11, 5, 9, 8, 10, 7, 13, 12, 3, 9, 1, 1, 4, 9, 9, 10, 4, 10, 6, 7, 5, 2, 9, 4, 16, 7, 9, 10, 9, 2, 9, 13, 3, 8, 3, 15, 9, 5, 5, 11, 6, 7, 9, 9, 6, 10, 0, 10, 9, 11 },
                new[] { 2, 9, 7, 5, 5, 8, 9, 7, 2, 6, 7, 5, 4, 4, 9, 8, 7, 10, 5, 11, 9, 9, 3, 4, 4, 6, 5, 8, 3, 10, 11, 3, 10, 11, 3, 2, 5, 4, 8, 5, 8, 9, 3, 7, 10, 1, 9, 11, 3, 4, 4, 1, 3, 10, 2, 10, 0, 4, 6 },
                new[] { 4, 8, 6, 4, 3, 7, 8, 6, 4, 5, 6, 3, 2, 4, 8, 7, 6, 9, 3, 10, 8, 8, 5, 2, 5, 5, 3, 7, 4, 9, 10, 3, 9, 10, 4, 2, 4, 2, 7, 1, 7, 8, 1, 6, 9, 5, 8, 10, 5, 3, 2, 3, 3, 9, 4, 9, 4, 0, 5 },
                new[] { 4, 3, 8, 6, 4, 9, 10, 1, 7, 2, 8, 4, 3, 5, 10, 2, 3, 11, 2, 12, 10, 10, 3, 3, 2, 7, 2, 9, 5, 11, 12, 5, 11, 5, 6, 5, 1, 5, 9, 4, 4, 10, 4, 8, 4, 5, 10, 12, 6, 5, 5, 6, 4, 11, 7, 11, 6, 5, 0 } },
                new[] { "AA", "BF", "BL", "BN", "BT", "BU", "CA", "CP", "CX", "EH", "ES", "EU", "EZ", "FC", "FS", "FU", "GS", "HV", "HX", "IF", "IL", "IR", "JG", "JJ", "JL", "JT", "JU", "KE", "KS", "MA", "MO", "NH", "NL", "NN", "NT", "OJ", "OY", "PA", "PH", "PJ", "PT", "QD", "QG", "RL", "RM", "RN", "SQ", "SV", "TG", "TO", "TX", "UV", "VJ", "XQ", "YB", "YI", "YQ", "YW", "ZH" },
                new[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 22, 0, 14, 0, 0, 0, 25, 0, 13, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 23, 0, 0, 11, 0, 20, 0, 18, 0, 5, 0, 0, 0, 0, 16, 0, 3, 0, 19, 0, 0, 0, 0, 0, 0, 0 }, 1);
        Assert.Equal(1716, sut.ReleasedPressure);
    }

    [Fact]
    public void SolveSecondSample()
    {
        var graphParser = new GraphParser(SAMPLE_INPUT);
        var sut = new PressureReleaseValve3(SAMPLE_INPUT, graphParser.Graph, graphParser.Names, graphParser.Flows, 2);
        Assert.Equal(1707, sut.ReleasedPressure);
    }

//    [Fact]
//    public void Test1()
//    {
//        const string input = @"Valve AA has flow rate=0; tunnels lead to valves DD, BB
//Valve BB has flow rate=13; tunnels lead to valves CC, AA
//Valve CC has flow rate=22; tunnels lead to valves DD, BB
//Valve DD has flow rate=20; tunnels lead to valves CC, AA";
//
//        /*
//         * == Minute 1 ==
//         * No valves are open.
//         * You move to valve DD.
//         * The elephant moves to valve BB.
//         *
//         * == Minute 2 ==
//         * No valves are open.
//         * You open valve DD.
//         * The elephant opens valve BB.
//         *
//         * == Minute 3 ==
//         * Valve DD and BB are open, releasing 33 pressure
//         * You move to valve CC
//         *
//         * == Minute 4 ==
//         * Valve DD and BB are open, releasing 33 pressure
//         * You open valve CC
//         *
//         * == Minute 5..26 ==
//         * Valves BB, CC and DD are open, releasing 52 pressure
//         *
//         * Total: 33 * 2 + 52 * 22 = 66 + 1144 = 1210
//         */
//
//        var sut = new PressureReleaseValve(input);
//
//    }
}